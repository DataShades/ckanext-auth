[build-system]
requires = ["setuptools>=61.2"]
build-backend = "setuptools.build_meta"

[project]
name = "ckanext-auth"
version = "0.4.2"
description = "2FA authentication for CKAN"
authors = [
    {name = "DataShades", email = "datashades@linkdigital.com.au"},
    {name = "Oleksandr Cherniavskyi", email = "mutantsan@gmail.com"},
]
maintainers = [
    {name = "DataShades", email = "datashades@linkdigital.com.au"},
]
license = {text = "AGPL"}
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
keywords = ["CKAN"]
urls = {Homepage = "https://github.com/DataShades/ckanext-auth"}
dependencies = [
    "pyotp>=2.6.0,<3.0.0"
]
optional-dependencies = {}

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.entry-points]
"ckan.plugins" = {auth = "ckanext.auth.plugin:AuthPlugin"}
"babel.extractors" = {ckan = "ckan.lib.extract:extract_ckan"}

[tool.setuptools.packages]
find = {}

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::sqlalchemy.exc.SADeprecationWarning",
    "ignore::sqlalchemy.exc.SAWarning",
    "ignore::DeprecationWarning",
]
addopts = "--ckan-ini test.ini"

[tool.pyright]
extraPaths = [
    "../ckan",
]
pythonVersion = "3.11"
include = ["ckanext"]
strict = []

strictParameterNoneValue = true

# Check the meaning of rules here
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
reportFunctionMemberAccess = true # non-standard member accesses for functions
reportMissingImports = true
reportMissingModuleSource = true
reportMissingTypeStubs = false
reportImportCycles = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false # Context won't work with this rule
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportOverlappingOverload = true
reportUntypedFunctionDecorator = false
reportUnknownParameterType = true
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportMissingTypeArgument = true
reportInvalidTypeVarUse = true
reportCallInDefaultInitializer = true
reportUnknownVariableType = true
reportUntypedBaseClass = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportUnusedCallResult = false # allow function calls for side-effect only
useLibraryCodeForTypes = true
reportGeneralTypeIssues = true
reportPropertyTypeMismatch = true
reportWildcardImportFromLibrary = true
reportUntypedClassDecorator = false
reportUntypedNamedTuple = true
reportPrivateUsage = true
reportPrivateImportUsage = true
reportInconsistentConstructor = true
reportMissingSuperCall = false
reportUninitializedInstanceVariable = true
reportInvalidStringEscapeSequence = true
reportMissingParameterType = true
reportImplicitStringConcatenation = false
reportUndefinedVariable = true
reportUnboundVariable = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnsupportedDunderAll = true
reportUnusedCoroutine = true
reportUnnecessaryTypeIgnoreComment = true
reportMatchNotExhaustive = true
reportAny = false
reportExplicitAny = false


[tool.ruff]
target-version = "py311"
line-length = 120

[tool.ruff.lint]
select = [
    "B",   # likely bugs and design problems
    "BLE", # do not catch blind exception
    "C40", # better list/set/dict comprehensions
    "C90", # check McCabe complexity
    "COM", # trailing commas
    "E",   # pycodestyle error
    "W",   # pycodestyle warning
    "F",   # pyflakes
    "G",   # format strings for logging statements
    "N",   # naming conventions
    "PL",  # pylint
    "PT",  # pytest style
    "PIE", # misc lints
    "Q",   # preferred quoting style
    "RET", # improvements for return statements
    "RSE", # improvements for rise statements
    # "S",  # security testing
    "SIM", # simplify code
    "T10", # debugging statements
    "T20", # print statements
    "TID", # tidier imports
    "TRY", # better exceptions
    "UP",  # upgrade syntax for newer versions of the language
]
ignore = [
    "E712",    # comparison to bool: violated by SQLAlchemy filters
    "PLC1901", # simplify comparison to empty string: violated by SQLAlchemy filters
    "COM812", # conflicts with `ruff format`
    "TRY003"
]

[tool.ruff.lint.per-file-ignores]
"ckanext/$PLUGIN/tests*" = ["S", "PL"]

[tool.ruff.lint.isort.sections]
ckan = ["ckan"]
ckanext = ["ckanext"]
self = ["ckanext.auth"]
